# This presentation was the closing keynote of the Heroku Waza conference in January, 2012.
# It has been slightly modified here for clarity and for use in the "present" format; the original
# used a precursor to that tool.

Concurrency is not Parallelism 
(Конкурентность – это не параллелизм)

Waza, 11 января 2012
 
Rob Pike
r@golang.org

Адаптация
Замир Мусаев

* Запись выступления

Есть запись оригинального выступленя на конференции Waza от Heroku, которая прошла в январе 2012

.image waza/pike.png _ 300

Посмотреть можно по ссылке [[http://vimeo.com/49718712][http://vimeo.com/49718712]]

* Мы живем в эпоху параллелизма

- Многоядерность.
- Сети.
- Облака для вычислений.
- Наргузка от пользователей.

Технологии должны помогать нам во взаимодействии со всем этим.

Что конкурентные подход успешно и делает.

* Язык Go поддерживает конкурентные вычисления из коробки

Для этого Go предлагает:

- конкурентное исполнение (горутины)
- синхронизация и обмен сообщениями (каналы)
- одновременное управление конкурентными каналами (select)

*  Конкурентность - это куруто! Ура параллелизму!!

НЕТ! Ошибка.

Когда язык Go был представлен было много путаницы. Монгие не понимали разницу.

"У меня алогитм нахождения простых числел(решето Эратосфена) на 4 процессорах работает медленнее чем раньше!"

* Конкурентость

Программирование по принципу композиции независимо выполняющихся процессов.

(В общем понимании процессы – это не те процессы, что, например в Linux. Очень тяжело дать коррекное определение)

* Параллелизм

Программирование по принципу одновременного исполнения или одновременных вычислений(возможно связанных). 


* Конкурентность vs. параллелизм

Конкурентость – это как взаимодействовать со множеством объектов одновременно.

Параллелизм – это как делать много дел одновременно.

Не одно и тоже, но связанно.

Конкурентность – это про структуру, тогда как параллелизм – это про исполнение.

Конкурентность позволяет выстроить решение проблемы, которое может быть(но не обязательно) распараллелено.

* Аналогия

Конкурентно: драйвера для мыши, клавиатуры, дисплея и жестких дисков.

Параллельно: произведение векторов, сетевое взаимодействие(например разговор по Skype: видео+голос одновременно).

* Конкурентность и коммуникация(обмен сообщениями)

Конкурентность – это способ структурировать программу путем разбиения ее на фрагменты, которые могут исполняться независимо.

Коммуникация(обмен сообщениями) необходима для координации независимо исполняющихся процессов.

По такой модели работает язык Go(как и язык Erlang и другие). Основой самой модели является CSP:

C. A. R. Hoare: Communicating Sequential Processes (CACM 1978)

* Суслики

Все что я рассказывал слишком абстрактно. Перейдем к конкретике.

* Опишем проблему

Отвезти стопку руководств по устаревшему языку программирования в мусоросжигательную печь.

.image waza/gophersimple1.jpg

Один сулик будет делать это очень долго.

* Нужно больше сусликов!

.image waza/gophersimple3.jpg

Не достаточно просто добавить новых сусликов, им нужны еще и тачки.

* Больше сусликов и больше тачек

.image waza/gophersimple2.jpg

Так дела пойдут быстрее, но образуются узкие места у стопки и у мусоросжигательной печи.
Также сусликов необходимо координировать.
Тут нам попмогут сообщения (Коммуникация между сусликами).

* Всего должно быть в два раза больше

Исключим узкие места – сделаем сусликов действительно независимыми.

.image waza/gophersimple4.jpg

Так мы сможем справляться с работой в два раза быстрее.

* Конкурентная композиция

.image waza/gophersimple4.jpg
Конкурентная композиция из двух сусликов.

* Конкурентная композиция

Такая конструкция не становится параллельной автоматически!

А что если в один момент времени работает только один суслик?
Тогда конструкция не перестанет быть конкурентной, но уже не параллельная.


Как правило, такие конструкции легко поддаются распараллеливанию.

Более того, конкурентная композиция позволяет выстраивать и другие конструкции.

* Другой подход

.image waza/gophercomplex0.jpg

Три суслика за работой. Они делают свое дело, но вероятно с задержками.
Каждый суслик – это независимо исполняемая процедура. 
Плюс координация(коммуникация/обмен сообщениями) между всеми тремя.

* Еще больше раздробим конкурентность

Добавим еще одну сусликовую процедуру, которая будет возвращать пустые тачки.
.image waza/gophercomplex1.jpg
Чтобы сгладить процесс теперь у нас четыре суслика за работой. Каждый выполняет одну простую задачу.

Если все организовать правильно(неправдоподобно, но не невозможно), то мы получим систему, которая работает в четыре раза быстрее, чем изначальная с одним сусликом. 

* Выводы

Мы повысили производительность нашей системы путем добавления конкурентных процедур к уже существующей конструкции.

Больше сусликов, которые выполняют больше работы – да, так работает лучше.

Это более глубокое понимание принципов утилизации ресурсов, чем просто параллелизм.


* Конкурентные процедуры

Четыре различные сусликовые процедуры:

- сложить книги в тачку
- отвезти тачку к мусоросжигательной печи
- выгрузить содержимое тачки в мусоросжигательную печь
- вернуть пустую тачку к стопке с книгами

Различные конкурентные подходы позволяют по рвзному распараллеливать работу.

* Больше параллелизма!

Теперь мы можем подойти к распараллеливанию с другой стороны. Конкурентные подходы делают эту задачу легкой. Восемь сусликов и все заняты.

.image waza/gophercomplex2.jpg

* Или возможно, у нас и вовсе не будет никакого параллелизма

Помните, даже если в один момент времени только один суслик будет активен(нет параллелизма), то наша конструкция не перестает быть правильной и конкурентной.

.image waza/gophercomplex2.jpg

* Другой подход

Вот вам другой возможный подход к решению проблемы путем организации сусликов в конкурентные процедуры.

Две сусликовые процедуры с промежуточной стопкой.

.image waza/gophercomplex3.jpg

* Распараллеливаем как обычно

Чтобы получить большую производительность запускаем больше конкурентных процедур.

.image waza/gophercomplex4.jpg

* Или еще один подход

Внедрим промежуточную стопку в конструкцию, где много сусликов:

.image waza/gophercomplex5.jpg

* Полная оптимизация

Используем одновременно все наши подходы. 

Все шестнадцать сусликов за тяжелым трудом!

.image waza/gophercomplex6.jpg

* Какие уроки можно извлечь

- Существует много подходов к разбиению процессов.
- Это и есть конкурентый подход к проектированию.
- Как только у нас появится разбиение процессов распараллеливание последует само собой.
- При этом все настолько просто, что при любом количестве ресурсов общий результат не страдает.

* Если вернуться к компьютерам

В нашей задаче перевозки книг:

- стопка книг => контент
- суслик => CPU
- тачка => обработка, рендеринг или передача по сети
- мусоросжигательная печь => прокси, браузер или любой другой потребитель

Таким образом мы получаем конкурентную архитектуру для масштабируемых сервисов.
Суслики, которые поставляют контент.

* Заключение

Конкурентность – это мощно.

Конкурентность – это не параллелизм.

Конкурентность позволяет распараллеливать.

Конкурентность делает распараллеливание, масштабирование и многое другое легкодоступными.

* Больше информации:

Go: golang.org

Some history: swtch.com/~rsc/thread/

A previous talk (video): tinyurl.com/newsqueak1

Parellelism is not concurrency (Harper): tinyurl.com/pincharper

A concurrent window system (Pike): tinyurl.com/pikecws

Concurrent power series (McIlroy): tinyurl.com/powser

And finally, parallel but not concurrent:
research.google.com/archive/sawzall.html
